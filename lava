Shader "Unlit/lava"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        Cull off
        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float3 ro :TEXCOORD0;
                float3 surf :TEXCOORD1;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.ro = mul(unity_WorldToObject,float4(_WorldSpaceCameraPos,1));
                o.surf = v.vertex;
                return o;
            }
            float bo(float3 p,float3 s){p = abs(p) - s;return max(p.x,max(p.y,p.z));}
            float smoothmin(float d1, float d2, float k){
                float h = exp(-k * d1) + exp(-k * d2);
                return -log(h) / k;
            }
            float map(float3 p)
            {
                float b = bo(p,1.);
                float t = _Time.y;
                float3 pp = p;
                float3 op = p;
                p.xy += sin(t)/3.;
                float o = length(p) - 0.2;
                pp.zy += sin(t)/3.;
                float o2 = length(pp) - 0.2;
                o2 = bo(pp,.1);
                o = length(op + float3(0.,.5,0.)) - .5;
                o = bo(op - float3(0.,.45,0.),float3(.5,.05,.5));
                o2 = bo(op + float3(0.,.45,0.),float3(.5,.05,.5));
                o = smoothmin(o,o2,6.5);
                o2 = length(op - float3(0,sin(t),0)/2. ) - .1;
                o = smoothmin(o,o2,6.5);
                o2 = length(op - float3(sin(t)/10.+.1,sin(t/2. + 1.3),sin(t)/13.+.2 )/2. ) - .1;
                o = smoothmin(o,o2,6.5);
                o = max(o,b);
                return o;
            }
            float3 calcNormal(float3 p)
            {
                float2 e = float2(0.001,0.);
                return normalize(map(p) - float3(map(p - e.xyy),map( p - e.yxy),map( p - e.yyx)));
            }

            float marching(float3 ro,float3 rd)
            {
                float depth = 0.0;
                for(int i = 0 ; i< 66; i++)
                {
                    float3 rp = ro + rd * depth;
                    float d = map(rp);
                    if(abs(d) < 0.001)
                    {
                        return depth;
                    }
                    depth += d;
                }
                return -1;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float3 ro = i.ro;
                float3 rd = normalize(i.surf - ro);

                float3 color = 0;
                float d = marching(ro,rd);
                if(d > 0)
                {
                    float3 light = normalize(float3(0.2,0.4,0.8));
                    color = 1;
                    float2 e = float2(1.0, -1.0) * .01;
                    float3 pos = ro + rd * d;
                    float3 normal = normalize(
                            e.xyy * map(pos + e.xyy) +
                            e.yyx * map(pos + e.yyx) +
                            e.yxy * map(pos + e.yxy) +
                            e.xxx * map(pos + e.xxx));
                    normal = calcNormal(ro + rd * d);;
                    float diff = 0.5 + 0.5 * saturate(dot(light,normal));
                    color = color * diff;
                   // color = normal;
                }else{
                    clip(-1);
                }
                return float4(color,1);
            }
            ENDCG
        }
    }
}
